generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AuthenticationToken {
  userId               Int      @id @unique(map: "REL_authentication_token_user_id") @map("user_id")
  accessToken          String   @unique(map: "IDX_authentication_token_access_token") @map("access_token") @db.VarChar(255)
  accessTokenExpireAt  DateTime @map("access_token_expire_at") @db.Timestamp(0)
  refreshToken         String   @unique(map: "IDX_authentication_token_refresh_token") @map("refresh_token") @db.VarChar(255)
  refreshTokenExpireAt DateTime @map("refresh_token_expire_at") @db.Timestamp(0)
  createdAt            DateTime @map("created_at") @db.Timestamp(0)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_authentication_token_user_id_user_id")

  @@map("authentication_token")
}

model ResetPasswordToken {
  userId    Int       @id @unique(map: "REL_reset_password_token_user_id") @map("user_id")
  token     String    @unique(map: "IDX_reset_password_token_token") @db.VarChar(50)
  expiredAt DateTime  @map("expired_at") @db.Timestamp(0)
  createdAt DateTime  @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_reset_password_token_user_id_user_id")

  @@map("reset_password_token")
}

model VerifyEmailToken {
  userId    Int       @id @unique(map: "REL_verify_email_token_user_id") @map("user_id")
  token     String    @unique(map: "IDX_verify_email_token_token") @db.VarChar(50)
  expiredAt DateTime  @map("expired_at") @db.Timestamp(0)
  createdAt DateTime  @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_verify_email_token_user_id_user_id")

  @@map("verify_email_token")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique(map: "IDX_role_name") @db.VarChar(255)
  description String @db.VarChar(255)
  user        User[]

  @@map("role")
}

model OauthProvider {
  id          Int         @id @default(autoincrement())
  name        String      @unique(map: "IDX_oauth_provider_name") @db.VarChar(255)
  oauth2Users OauthUser[]

  @@map("oauth_provider")
}

model OauthUser {
  oauthProvider   OauthProvider @relation(fields: [oauthProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  oauthProviderId Int           @map("oauth_provider_id") // relation scalar field (used in the `@relation` attribute above)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int           @map("user_id") // relation scalar field (used in the `@relation` attribute above)
  externalUserId  String        @map("external_user_id") @db.VarChar(255)
  email           String?       @db.VarChar(255)

  @@id([oauthProviderId, userId])
  @@unique(name: "oauthProviderExternalUserId", [externalUserId, oauthProviderId])
  @@unique(name: "oauthProviderEmail", [email, oauthProviderId])
  @@map("oauth_user")
}

model UserCredentials {
  userId          Int     @id @unique(map: "REL_user_credentials_user_id") @map("user_id")
  password        String  @db.VarChar(255)
  email           String  @unique(map: "IDX_user_email") @db.VarChar(255)
  isEmailVerified Boolean @default(false) @map("is_email_verified") @db.Boolean
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_user_credentials_user_id_user_id")

  @@map("user_credentials")
}

model User {
  id                  Int                  @id @default(autoincrement())
  uuid                String               @unique(map: "IDX_user_uuid") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?              @map("name") @db.VarChar(100)
  isActive            Boolean              @default(true) @map("is_active") @db.Boolean
  imageId             String?              @map("image_id") @db.VarChar(255)
  imageUrl            String?              @map("image_url") @db.VarChar(255)
  createdAt           DateTime             @map("created_at") @db.Timestamp(0)
  updatedAt           DateTime?            @map("updated_at") @db.Timestamp(0)
  roleId              Int                  @map("role_id")
  role                Role                 @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "FK_user_role_id_role_id")
  authenticationToken AuthenticationToken?
  resetPasswordToken  ResetPasswordToken?
  verifyEmailToken    VerifyEmailToken?
  credentials         UserCredentials?
  oauthProviders      OauthUser[]

  @@index([roleId], map: "AK_user_role_id")
  @@map("user")
}

// npx prisma migrate dev --name init
// npx prisma migrate dev --name added_oauth2_user
// npx prisma migrate deploy
